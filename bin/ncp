#!/usr/bin/env node


var ncp = require('../lib/ncp'),
    args = process.argv.slice(2),
    fs = require('fs'),
    source, dest;

if (args.length < 2) {
  console.error('Usage: ncp [source] [destination] [--filter=filter] [--limit=concurrency limit] [--flat] [--clobber]');
  process.exit(1);
}

// parse arguments the hard way
function startsWith(str, prefix) {
  return str.substr(0, prefix.length) == prefix;
}

var options = {};
args.forEach(function (arg) {
  if (startsWith(arg, "--limit=")) {
    options.limit = parseInt(arg.split('=', 2)[1], 10);
  }
  if (startsWith(arg, "--filter=")) {
	  var reg = arg.split('=', 2)[1].replace(/\"/g,"");
    options.filter = new RegExp(reg);
  }
  if (startsWith(arg, "--stoponerr")) {
    options.stopOnErr = true;
  }
  if (startsWith(arg, "--flat")) {
    options.flatCopy = true;
  }
  if (startsWith(arg, "--clobber")) {
    options.clobber = true;
  }
  if (startsWith(arg, "--find=")) {
    var reg = arg.replace("--find=","");
    options.find = new RegExp(reg, 'g');
  }
  if (startsWith(arg, "--findtext=")) {
    var reg = arg.replace("--findtext=","");
    options.find = reg;
  }
  if (startsWith(arg, "--replace=")) {
    var reg = arg.replace("--replace=","");
    options.replace = reg;

    options.transform = function(readStream, file, target) {
        const fileData = [];
        var readStream = fs.createReadStream(file.name);

        readStream.on("data", function (chunk) {
          fileData.push(chunk);
        });
      
        readStream.on("end", function () {          
          var fileStr = Buffer.concat(fileData).toString().replace(options.find, options.replace);
          writeStream = fs.createWriteStream(target, { mode: file.mode });          
          writeStream.write(fileStr, function() {
            fs.utimesSync(target, file.atime, file.mtime);
          });
        });
    };
  }
});

ncp.ncp(args[0], args[1], options, function (err) {
  if (Array.isArray(err)) {
    console.error('There were errors during the copy.');
    err.forEach(function (err) {
      console.error(err.stack || err.message);
    });
    process.exit(1);
  }
  else if (err) {
    console.error('An error has occurred.');
    console.error(err.stack || err.message);
    process.exit(1);
  }
});
